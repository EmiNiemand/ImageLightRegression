#ifndef IMAGELIGHTREGRESSION_INPUTMANAGER_H
#define IMAGELIGHTREGRESSION_INPUTMANAGER_H

#include <GLFW/glfw3.h>
#include <vector>

enum class Key {
    /// KEYBOARD INPUTS
    KEY_ESC = GLFW_KEY_ESCAPE, KEY_F1 = GLFW_KEY_F1, KEY_F2 = GLFW_KEY_F2, KEY_F3 = GLFW_KEY_F3, KEY_F4 = GLFW_KEY_F4,
    KEY_F5 = GLFW_KEY_F5, KEY_F6 = GLFW_KEY_F6, KEY_F7 = GLFW_KEY_F7, KEY_F8 = GLFW_KEY_F8, KEY_F9 = GLFW_KEY_F9,
    KEY_F10 = GLFW_KEY_F10, KEY_F11 = GLFW_KEY_F11, KEY_F12 = GLFW_KEY_F12, KEY_PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
    KEY_DELETE = GLFW_KEY_DELETE, KEY_HOME = GLFW_KEY_HOME, KEY_PAGE_UP = GLFW_KEY_PAGE_UP, KEY_PAGE_DOWN = GLFW_KEY_PAGE_DOWN,
    KEY_END = GLFW_KEY_END, KEY_GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT, KEY_1 = GLFW_KEY_1, KEY_2 = GLFW_KEY_2, KEY_3 = GLFW_KEY_3,
    KEY_4 = GLFW_KEY_4, KEY_5 = GLFW_KEY_5, KEY_6 = GLFW_KEY_6, KEY_7 = GLFW_KEY_7, KEY_8 = GLFW_KEY_8, KEY_9 = GLFW_KEY_9,
    KEY_0 = GLFW_KEY_0, KEY_MINUS = GLFW_KEY_MINUS, KEY_EQUAL = GLFW_KEY_EQUAL, KEY_BACKSPACE = GLFW_KEY_BACKSPACE,
    KEY_NUM_LOCK = GLFW_KEY_NUM_LOCK, KEY_KP_DIVIDE = GLFW_KEY_KP_DIVIDE, KEY_KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
    KEY_TAB = GLFW_KEY_TAB, KEY_Q = GLFW_KEY_Q, KEY_W = GLFW_KEY_W, KEY_E = GLFW_KEY_E, KEY_R = GLFW_KEY_R, KEY_T = GLFW_KEY_T,
    KEY_Y = GLFW_KEY_Y, KEY_U = GLFW_KEY_U, KEY_I = GLFW_KEY_I, KEY_O = GLFW_KEY_O, KEY_P = GLFW_KEY_P,
    KEY_LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET, KEY_RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET, KEY_BACKSLASH = GLFW_KEY_BACKSLASH,
    KEY_KP_7 = GLFW_KEY_KP_7, KEY_KP_8 = GLFW_KEY_KP_8, KEY_KP_9 = GLFW_KEY_KP_9, KEY_KP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,
    KEY_CAPS_LOCK = GLFW_KEY_CAPS_LOCK, KEY_A = GLFW_KEY_A, KEY_S = GLFW_KEY_S, KEY_D = GLFW_KEY_D, KEY_F = GLFW_KEY_F,
    KEY_G = GLFW_KEY_G, KEY_H = GLFW_KEY_H, KEY_J = GLFW_KEY_J, KEY_K = GLFW_KEY_K, KEY_L = GLFW_KEY_L, KEY_SEMICOLON = GLFW_KEY_SEMICOLON,
    KEY_APOSTROPHE = GLFW_KEY_APOSTROPHE, KEY_ENTER = GLFW_KEY_ENTER, KEY_KP_4 = GLFW_KEY_KP_4, KEY_KP_5 = GLFW_KEY_KP_5,
    KEY_KP_6 = GLFW_KEY_KP_6, KEY_KP_ADD = GLFW_KEY_KP_ADD, KEY_LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT, KEY_Z = GLFW_KEY_Z,
    KEY_X = GLFW_KEY_X, KEY_C = GLFW_KEY_C, KEY_V = GLFW_KEY_V, KEY_B = GLFW_KEY_B, KEY_N = GLFW_KEY_N, KEY_M = GLFW_KEY_M,
    KEY_COMMA = GLFW_KEY_COMMA, KEY_PERIOD = GLFW_KEY_PERIOD, KEY_SLASH = GLFW_KEY_SLASH, KEY_RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
    KEY_ARROW_UP = GLFW_KEY_UP, KEY_KP_1 = GLFW_KEY_KP_1, KEY_KP_2 = GLFW_KEY_KP_2, KEY_KP_3 = GLFW_KEY_KP_3,
    KEY_KP_ENTER = GLFW_KEY_KP_ENTER, KEY_LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL, KEY_WINDOWS = GLFW_KEY_LEFT_SUPER,
    KEY_LEFT_ALT = GLFW_KEY_LEFT_ALT, KEY_SPACE = GLFW_KEY_SPACE, KEY_RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
    KEY_RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER, KEY_RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL, KEY_ARROW_LEFT = GLFW_KEY_LEFT,
    KEY_ARROW_DOWN = GLFW_KEY_DOWN, KEY_ARROW_RIGHT = GLFW_KEY_RIGHT, KEY_KP_0 = GLFW_KEY_KP_0, KEY_KP_DECIMAL = GLFW_KEY_KP_DECIMAL,

    /// MOUSE INPUTS
    MOUSE_LEFT_BUTTON = GLFW_MOUSE_BUTTON_LEFT, MOUSE_RIGHT_BUTTON = GLFW_MOUSE_BUTTON_RIGHT,
    MOUSE_MIDDLE_BUTTON = GLFW_MOUSE_BUTTON_MIDDLE
};

class InputManager {
private:
    inline static InputManager* inputManager;

public:
    std::vector<Key> keysDown;
    std::vector<Key> keysUp;
    std::vector<Key> keysPressed;
    inline static std::vector<Key> keysDownBuffer;
    inline static std::vector<Key> keysUpBuffer;
    inline static std::vector<Key> keysPressedBuffer;

public:
    InputManager(InputManager &other) = delete;
    void operator=(const InputManager&) = delete;
    virtual ~InputManager();

    static InputManager* GetInstance();

    /// Should be called after glfwPollEvents
    void ManageInput();

    bool IsKeyDown(Key key);
    bool IsKeyPressed(Key key);
    bool IsKeyReleased(Key key);

    static void KeyActionCallback(GLFWwindow *window, int key, int scancode, int action, int mods);
    static void MouseActionCallback(GLFWwindow* window, int button, int action, int mods);

private:
    explicit InputManager();
};


#endif //IMAGELIGHTREGRESSION_INPUTMANAGER_H
